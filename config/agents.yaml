# Distributed AI Development System - Agent Configuration
# 
# This file defines the configuration for all agents in the distributed AI network.
# Each agent represents a remote Ollama instance with specific capabilities and models.
#
# Configuration Format:
# agents:
#   agent_id:
#     name: Human-readable agent name
#     endpoint: HTTP endpoint for Ollama API communication
#     model: Default model to use for this agent
#     specialization: Agent's area of expertise
#     priority: Workload priority (1=highest, 5=lowest)
#     status: Current operational status
#     capabilities: List of agent capabilities
#     hardware: Hardware configuration details
#     performance_targets: Expected performance metrics
#
# Usage:
#   - Modify this file to add, remove, or reconfigure agents
#   - Restart monitoring systems to pick up configuration changes
#   - Use 'disabled' status to temporarily exclude agents from monitoring
#
# Author: Distributed AI Development System
# Version: 2.0 - Updated for deepblackcloud infrastructure

agents:
  acacia_agent:
    name: "ACACIA Infrastructure Specialist"
    endpoint: "http://192.168.1.72:11434"
    model: "deepseek-r1:7b"
    specialization: "Infrastructure, DevOps & System Architecture"
    priority: 1
    status: "active"
    capabilities:
      - "infrastructure_design"
      - "devops_automation" 
      - "system_architecture"
      - "database_design"
      - "security_implementation"
      - "container_orchestration"
      - "cloud_deployment"
      - "monitoring_setup"
    hardware:
      gpu_type: "NVIDIA GTX 1070"
      vram_gb: 8
      cpu_cores: 56  # 2x Intel Xeon E5-2680 v4 (28 cores each)
      ram_gb: 128
      storage_type: "NFS Server + NVMe SSDs"
      network_role: "NAS + Services Host"
    performance_targets:
      min_tokens_per_second: 3.0
      max_response_time_ms: 30000
      target_availability: 0.99
    tasks:
      current:
        - "Docker Swarm management and orchestration"
        - "Database schema design and optimization"
        - "Security and authentication implementation"
        - "CI/CD pipeline configuration"
      completed: []
    monitoring:
      health_check_interval: 30
      performance_check_interval: 300
      metrics_retention_hours: 24
    available_models:
      - "deepseek-r1:7b"
      - "codellama"
      - "llava"
      - "qwen2.5"
      - "llama3.2"

  walnut_agent:
    name: "WALNUT Senior Full-Stack Developer"
    endpoint: "http://192.168.1.27:11434"
    model: "starcoder2:15b"
    specialization: "Senior Full-Stack Development & Architecture"
    priority: 1
    status: "active"
    capabilities:
      - "full_stack_development"
      - "frontend_frameworks"
      - "backend_apis"
      - "database_integration"
      - "performance_optimization"
      - "code_architecture"
      - "react_development"
      - "nodejs_development"
      - "typescript_expertise"
    hardware:
      gpu_type: "AMD RX 9060 XT (RDNA 4)"
      vram_gb: 16
      cpu_cores: 16  # AMD Ryzen 7 5800X3D (8 cores, 16 threads)
      ram_gb: 64
      storage_type: "2x 1TB NVMe SSDs"
      network_role: "Docker Swarm Manager"
    performance_targets:
      min_tokens_per_second: 8.0
      max_response_time_ms: 20000
      target_availability: 0.99
    tasks:
      current:
        - "Frontend component development"
        - "API design and implementation"
        - "Full-stack application architecture"
        - "Performance optimization"
      completed: []
    monitoring:
      health_check_interval: 30
      performance_check_interval: 300
      metrics_retention_hours: 24
    available_models:
      - "starcoder2:15b"
      - "devstral"
      - "deepseek-coder-v2"
      - "qwen3"
      - "phi4"
      - "llava"
      - "mistral:7b-instruct"
      - "llama3.1:8b"
      - "gemma3:12b"
      - "qwq"
      - "qwen2.5-coder"
      - "deepseek-r1"
      - "codellama"
      - "llama3.2"
      - "llama3.2-vision"
      - "qwen2"
      - "gemma2"
      - "mxbai-embed-large"
      - "nomic-embed-text"

  ironwood_agent:
    name: "IRONWOOD Backend Development Specialist"
    endpoint: "http://192.168.1.113:11434"
    model: "deepseek-coder-v2"
    specialization: "Backend Development & Code Analysis"
    priority: 2
    status: "active"
    capabilities:
      - "backend_development"
      - "api_design"
      - "code_analysis"
      - "debugging"
      - "testing_frameworks"
      - "database_optimization"
      - "microservices_architecture"
      - "rest_api_development"
      - "graphql_implementation"
    hardware:
      gpu_type: "NVIDIA RTX 3070"
      vram_gb: 8
      cpu_cores: 24  # AMD Ryzen Threadripper 2920X (12 cores, 24 threads)
      ram_gb: 128
      storage_type: "High-performance storage array"
      network_role: "Development Workstation"
    performance_targets:
      min_tokens_per_second: 6.0
      max_response_time_ms: 25000
      target_availability: 0.95
    tasks:
      current:
        - "Backend API development"
        - "Database integration and optimization"
        - "Code analysis and debugging"
        - "Testing framework implementation"
      completed: []
    monitoring:
      health_check_interval: 30
      performance_check_interval: 300
      metrics_retention_hours: 24
    available_models:
      - "deepseek-coder-v2"
      - "devstral"
      - "phi4"
      - "llama3.1:8b"
      - "llava"
      - "qwen2.5-coder"
      - "mistral:7b-instruct"

  # Example configuration for additional agents (uncomment and modify as needed)
  # documentation_agent:
  #   name: "Documentation Specialist"
  #   endpoint: "http://192.168.1.xx:11434"
  #   model: "qwen3:latest"
  #   specialization: "Technical Documentation & API Docs"
  #   priority: 3
  #   status: "disabled"
  #   capabilities:
  #     - "technical_writing"
  #     - "api_documentation"
  #     - "user_guides"
  #     - "code_commenting"
  #     - "markdown_generation"
  #   hardware:
  #     gpu_type: "Integrated"
  #     vram_gb: 0
  #     cpu_cores: 8
  #     ram_gb: 16
  #   performance_targets:
  #     min_tokens_per_second: 3.0
  #     max_response_time_ms: 45000
  #     target_availability: 0.90

  # testing_agent:
  #   name: "QA Testing Specialist"
  #   endpoint: "http://192.168.1.xx:11434"
  #   model: "codellama:latest"
  #   specialization: "Testing & Quality Assurance"
  #   priority: 3
  #   status: "disabled"
  #   capabilities:
  #     - "unit_testing"
  #     - "integration_testing"
  #     - "e2e_testing"
  #     - "test_automation"
  #     - "code_review"
  #     - "performance_benchmarking"
  #   hardware:
  #     gpu_type: "Various"
  #     vram_gb: 8
  #     cpu_cores: 16
  #     ram_gb: 32
  #   performance_targets:
  #     min_tokens_per_second: 5.0
  #     max_response_time_ms: 30000
  #     target_availability: 0.95

# Global monitoring configuration
monitoring:
  refresh_interval_seconds: 5
  performance_window_minutes: 5
  max_history_samples: 100
  alert_thresholds:
    min_tokens_per_second: 2.0
    max_response_time_ms: 60000
    min_availability: 0.85
  
# Network configuration for deepblackcloud infrastructure
network:
  timeout_seconds: 30
  retry_attempts: 3
  retry_delay_seconds: 5
  base_network: "192.168.1.0/24"
  dns_domain: "home.deepblack.cloud"
  reverse_proxy: "traefik"

# Logging configuration  
logging:
  level: "INFO"
  file: "logs/agent_monitoring.log"
  max_size_mb: 100
  backup_count: 5

# Infrastructure details for deepblackcloud cluster
infrastructure:
  cluster_name: "deepblackcloud"
  total_agents: 3
  docker_swarm:
    manager: "walnut_agent"
    workers: ["acacia_agent", "ironwood_agent"]
  services:
    - name: "n8n"
      url: "https://n8n.home.deepblack.cloud"
      description: "Workflow automation with AI integration"
    - name: "anythingllm"
      url: "http://192.168.1.72:3051"
      description: "RAG system with Obsidian integration"
    - name: "portainer"
      url: "https://*.home.deepblack.cloud/portainer"
      description: "Container management"
    - name: "cockpit"
      urls:
        - "https://192.168.1.72:9090"
        - "https://192.168.1.27:9090"
        - "https://192.168.1.113:9090"
      description: "System monitoring and management"
  
# Project templates and specializations
project_templates:
  web_application:
    agents: ["walnut_agent", "ironwood_agent", "acacia_agent"]
    tech_stack: ["React", "Node.js", "PostgreSQL", "Docker"]
    
  api_service:
    agents: ["ironwood_agent", "acacia_agent"]
    tech_stack: ["Express", "PostgreSQL", "Docker", "Swagger"]
    
  mobile_app:
    agents: ["walnut_agent", "ironwood_agent"]
    tech_stack: ["React Native", "Expo", "Firebase"]
    
  devops_project:
    agents: ["acacia_agent", "ironwood_agent"]
    tech_stack: ["Docker", "Kubernetes", "Terraform", "Ansible"]